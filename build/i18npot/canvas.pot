# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2011, Martin Dobias
# This file is distributed under the same license as the PyQGIS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyQGIS \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-12 14:17\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/canvas.rst:5
# 21c3c8e309fc47eda8d67fe62b33d64b
msgid "Using Map Canvas"
msgstr ""

#: ../../source/canvas.rst:7
# 9c986c5a1dc34fc7855498c65f6c8681
msgid "The Map canvas widget is probably the most important widget within QGIS because it shows the map composed from overlaid map layers and allows interaction with the map and layers. The canvas shows always a part of the map defined by the current canvas extent. The interaction is done through the use of **map tools**: there are tools for panning, zooming, identifying layers, measuring, vector editing and others. Similar to other graphics programs, there is always one tool active and the user can switch between the available tools."
msgstr ""

#: ../../source/canvas.rst:16
# ba76692b4d824362b1f5fd706299a3e3
msgid "Map canvas is implemented as :class:`QgsMapCanvas` class in :mod:`qgis.gui` module.  The implementation is based on the Qt Graphics View framework. This framework generally provides a surface and a view where custom graphics items are placed and user can interact with them.  We will assume that you are familiar enough with Qt to understand the concepts of the graphics scene, view and items.  If not, please make sure to read the `overview of the framework <http://doc.qt.nokia.com/graphicsview.html>`_."
msgstr ""

#: ../../source/canvas.rst:24
# 2e43f564de0248d0ada317a6e645f08c
msgid "Whenever the map has been panned, zoomed in/out (or some other action triggers a refresh), the map is rendered again within the current extent. The layers are rendered to an image (using :class:`QgsMapRenderer` class) and that image is then displayed in the canvas.  The graphics item (in terms of the Qt graphics view framework) responsible for showing the map is :class:`QgsMapCanvasMap` class.  This class also controls refreshing of the rendered map. Besides this item which acts as a background, there may be more **map canvas items**.  Typical map canvas items are rubber bands (used for measuring, vector editing etc.) or vertex markers. The canvas items are usually used to give some visual feedback for map tools, for example, when creating a new polygon, the map tool creates a rubber band canvas item that shows the current shape of the polygon. All map canvas items are subclasses of :class:`QgsMapCanvasItem` which adds some more functionality to the basic ``QGraphicsItem`` objects."
msgstr ""

#: ../../source/canvas.rst:39
# bbd0f058bcf4450dbfc1116b9e80679e
msgid "To summarize, the map canvas architecture consists of three concepts:"
msgstr ""

#: ../../source/canvas.rst:41
# 7051e2b02fe34995846dd58c7cda5278
msgid "map canvas --- for viewing of the map,"
msgstr ""

#: ../../source/canvas.rst:42
# 7eb0350701094c838382ccdb00c05869
msgid "map canvas items --- additional items that can be displayed in map canvas,"
msgstr ""

#: ../../source/canvas.rst:43
# fba2db6598c6496e8f7ad66122265406
msgid "map tools --- for interaction with map canvas."
msgstr ""

#: ../../source/canvas.rst:47
# a33d968409fe4750a473c046a7b653cc
msgid "Embedding Map Canvas"
msgstr ""

#: ../../source/canvas.rst:49
# 8ff6fea0823d4d4794fe9c1c76f363fa
msgid "Map canvas is a widget like any other Qt widget, so using it is as simple as creating and showing it::"
msgstr ""

#: ../../source/canvas.rst:55
# 16bcab0a926b4171a4c9f449553a9adf
msgid "This produces a standalone window with map canvas. It can be also embedded into an existing widget or window. When using .ui files and Qt Designer, place a ``QWidget`` on the form and promote it to a new class: set ``QgsMapCanvas`` as class name and set ``qgis.gui`` as header file. The ``pyuic4`` utility will take care of it. This is a very convenient way of embedding the canvas. The other possibility is to manually write the code to construct map canvas and other widgets (as children of a main window or dialog) and create a layout."
msgstr ""

#: ../../source/canvas.rst:63
# 7df54eaab52b4531b4a755c39601e606
msgid "By default, map canvas has black background and does not use anti-aliasing. To set white background and enable anti-aliasing for smooth rendering::"
msgstr ""

#: ../../source/canvas.rst:69
# 86ce619f8cec473e93c0ad126c80176b
msgid "(In case you are wondering, ``Qt`` comes from ``PyQt4.QtCore`` module and ``Qt.white`` is one of the predefined ``QColor`` instances.)"
msgstr ""

#: ../../source/canvas.rst:72
# 9bfef3fad18b44ce917ef08b87bff683
msgid "Now it is time to add some map layers. We will first open a layer and add it to the map layer registry.  Then we will set the canvas extent and set the list of layers for canvas::"
msgstr ""

#: ../../source/canvas.rst:89
# aaf418f6c8c34f2bb4a2deff8331f6cb
msgid "After executing these commands, the canvas should show the layer you have loaded."
msgstr ""

#: ../../source/canvas.rst:92
# f269ec165be14dc3898d19e9768aa112
msgid "Using Map Tools with Canvas"
msgstr ""

#: ../../source/canvas.rst:94
# 87f7cd28187c4f138db2d89075a43a9a
msgid "The following example constructs a window that contains a map canvas and basic map tools for map panning and zooming.  Actions are created for activation of each tool: panning is done with :class:`QgsMapToolPan`, zooming in/out with a pair of :class:`QgsMapToolZoom` instances. The actions are set as checkable and later assigned to the tools to allow automatic handling of checked/unchecked state of the actions -- when a map tool gets activated, its action is marked as selected and the action of the previous map tool is deselected. The map tools are activated using :func:`setMapTool` method."
msgstr ""

#: ../../source/canvas.rst:159
# 2d51af3b393a4c1aa0b8cd87b9a87dd5
msgid "You can put the above code to a file, e.g. ``mywnd.py`` and try it out in Python console within QGIS.  This code will put the currently selected layer into newly created canvas::"
msgstr ""

#: ../../source/canvas.rst:167
# 8b81f794718f43db9522a5acbb6088d2
msgid "Just make sure that the ``mywnd.py`` file is located within Python search path (``sys.path``). If it isn't, you can simply add it: ``sys.path.insert(0, '/my/path')`` --- otherwise the import statement will fail, not finding the module."
msgstr ""

#: ../../source/canvas.rst:173
# 49690ee5c0584e738029f07cf1057623
msgid "Rubber Bands and Vertex Markers"
msgstr ""

#: ../../source/canvas.rst:175
# 773f74fff38f409f81a6be488c4a2f60
msgid "To show some additional data on top of the map in canvas, use map canvas items. It is possible to create custom canvas item classes (covered below), however there are two useful canvas item classes for convenience: :class:`QgsRubberBand` for drawing polylines or polygons, and :class:`QgsVertexMarker` for drawing points.  They both work with map coordinates, so the shape is moved/scaled automatically when the canvas is being panned or zoomed."
msgstr ""

#: ../../source/canvas.rst:183
# e64fbb240e064fb5b7f741b8c87ed7da
msgid "To show a polyline::"
msgstr ""

#: ../../source/canvas.rst:189
# 842738a109eb4e8bbb902d8b693726cf
msgid "To show a polygon::"
msgstr ""

#: ../../source/canvas.rst:195
# a429e8cb41aa4d0198faf7b1bc25bf76
msgid "Note that points for polygon is not a plain list: in fact, it is a list of rings containing linear rings of the polygon: first ring is the outer border, further (optional) rings correspond to holes in the polygon."
msgstr ""

#: ../../source/canvas.rst:199
# f583df68a1cc4f9ba5ad26ac9ed5788d
msgid "Rubber bands allow some customization, namely to change their color and line width::"
msgstr ""

#: ../../source/canvas.rst:205
# 6579296c96254e9599d57419770f9309
msgid "The canvas items are bound to the canvas scene. To temporarily hide them (and show again, use the :func:`hide` and :func:`show` combo. To completely remove the item, you have to remove it from the scene of the canvas::"
msgstr ""

#: ../../source/canvas.rst:211
# 0fbd0751ca0149dd929bae4d8c251c14
msgid "(in C++ it's possible to just delete the item, however in Python ``del r`` would just delete the reference and the object will still exist as it is owned by the canvas)"
msgstr ""

#: ../../source/canvas.rst:215
# e563d4fb394a41dc854d1ab76659792d
msgid "Rubber band can be also used for drawing points, however :class:`QgsVertexMarker` class is better suited for this (:class:`QgsRubberBand` would only draw a rectangle around the desired point). How to use the vertex marker::"
msgstr ""

#: ../../source/canvas.rst:223
# 5826264e899f470489cf4eeb46b71571
msgid "This will draw a red cross on position [0,0]. It is possible to customize the icon type, size, color and pen width::"
msgstr ""

#: ../../source/canvas.rst:231
# c4ae2151da4c40c49cc2ad7407a5048b
msgid "For temprary hiding of vertex markers and removing them from canvas, the same applies as for the rubber bands."
msgstr ""

#: ../../source/canvas.rst:235
# 628c2e8d71b74b298d9671fe6ce36d22
msgid "Writing Custom Map Tools"
msgstr ""

#: ../../source/canvas.rst:237
# 0f07ebd2dd4544b595b8a2a5069a0318
msgid "**TODO:** how to create a map tool"
msgstr ""

#: ../../source/canvas.rst:240
# f7b640103ca840beaf0e6a22469bca70
msgid "Writing Custom Map Canvas Items"
msgstr ""

#: ../../source/canvas.rst:242
# 2a54846bc5614f50b1bc2e5bdd46eb53
msgid "**TODO:** how to create a map canvas item"
msgstr ""

