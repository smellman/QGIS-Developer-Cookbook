# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2011, Martin Dobias
# This file is distributed under the same license as the PyQGIS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyQGIS \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-12 14:17\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/crs.rst:5
# f037554a039746dcb7ceeb62b313879f
msgid "Projections Support"
msgstr ""

#: ../../source/crs.rst:8
# 63875bb085604ce8bed4e39cb623db2d
msgid "Coordinate reference systems"
msgstr ""

#: ../../source/crs.rst:10
# 6a3a5f8b9132472a8818ba8b8a62a704
msgid "Coordinate reference systems (CRS) are encapsulated by :class:`QgsCoordinateReferenceSystem` class. Instances of this class can be created by several different ways:"
msgstr ""

#: ../../source/crs.rst:13
# e7cf27a2fe334c11ac9ad5e88fc6f729
msgid "specify CRS by its ID::"
msgstr ""

#: ../../source/crs.rst:18
# 8c5b80156f54443b8b1853d60a2bb73c
msgid "QGIS uses three different IDs for every reference system:"
msgstr ""

#: ../../source/crs.rst:20
# e61870c91d374ccdbfa4cb52934f30a9
msgid ":const:`PostgisCrsId` - IDs used within PostGIS databases."
msgstr ""

#: ../../source/crs.rst:21
# 0bea221e150048cebeb56341ffbe4bc7
msgid ":const:`InternalCrsId` - IDs internally used in QGIS database."
msgstr ""

#: ../../source/crs.rst:22
# ffd17c96237347b092e4d776a9158b47
msgid ":const:`EpsgCrsId` - IDs assigned by the EPSG organization"
msgstr ""

#: ../../source/crs.rst:24
# 993b3bdaac78433097ad30ce4c4ba017
msgid "If not specified otherwise in second parameter, PostGIS SRID is used by default."
msgstr ""

#: ../../source/crs.rst:26
# 7ba2f5e0c9dd4638a7823165979c94f3
msgid "specify CRS by its well-known text (WKT)::"
msgstr ""

#: ../../source/crs.rst:33
# 64381026b19e4afaa35aaff074df6a87
msgid "create invalid CRS and then use one of the :func:`create*` functions to initialize it. In following example we use Proj4 string to initialize the projection::"
msgstr ""

#: ../../source/crs.rst:38
# 189a8a3d5dc748a5b128e07d5f951db2
msgid "It's wise to check whether creation (i.e. lookup in the database) of the CRS has been successful: :func:`isValid` must return :const:`True`."
msgstr ""

#: ../../source/crs.rst:40
# 7e481afaf3fb402c93583b8f55f85f85
msgid "Note that for initialization of spatial reference systems QGIS needs to lookup appropriate values in its internal database :file:`srs.db`. Thus in case you create an independent application you need to set paths correctly with :func:`QgsApplication.setPrefixPath` otherwise it will fail to find the database. If you are running the commands from QGIS python console or developing a plugin you do not care: everything is already set up for you."
msgstr ""

#: ../../source/crs.rst:44
# 82a3e9bd683f461db4c2104500bb40ad
msgid "Accessing spatial reference system information::"
msgstr ""

#: ../../source/crs.rst:60
# 796d58f1b12c42bd80cdfcfeaefc4002
msgid "Projections"
msgstr ""

#: ../../source/crs.rst:62
# 2f5892a258dd46cb83d0c31a2d306ab9
msgid "You can do transformation between different spatial reference systems by using :class:`QgsCoordinateTransform` class. The easiest way to use it is to create source and destination CRS and construct :class:`QgsCoordinateTransform` instance with them. Then just repeatedly call :func:`transform` function to do the transformation. By default it does forward transformation, but it is capable to do also inverse transformation::"
msgstr ""

